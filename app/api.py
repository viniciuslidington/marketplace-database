"""
API FastAPI para o Marketplace Database
"""
from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Optional
import uvicorn
from database import MarketplaceDB

# Modelos Pydantic para valida√ß√£o de dados
class ProdutoFiltro(BaseModel):
    categoria_id: Optional[int] = None
    preco_min: Optional[float] = None
    preco_max: Optional[float] = None
    limite: int = 50

class ItemPedido(BaseModel):
    id: int
    quantidade: int
    preco: float

class CriarPedido(BaseModel):
    id_comprador: int
    id_endereco: int
    produtos: List[ItemPedido]
    metodo_pagamento: str

# Inicializar FastAPI
app = FastAPI(
    title="Marketplace Database API",
    description="API REST para gerenciamento de marketplace",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==================== ENDPOINTS DE PRODUTOS ====================

@app.get("/produtos", response_model=List[Dict])
async def listar_produtos(
    categoria_id: Optional[int] = Query(None, description="ID da categoria"),
    preco_min: Optional[float] = Query(None, description="Pre√ßo m√≠nimo"),
    preco_max: Optional[float] = Query(None, description="Pre√ßo m√°ximo"),
    limite: int = Query(50, description="Limite de resultados")
):
    """
    **Listar produtos com filtros opcionais**
    
    Este endpoint permite buscar produtos do marketplace aplicando diversos filtros:
    
    - **categoria_id**: Filtrar por categoria espec√≠fica (ex: 1 para Eletr√¥nicos)
    - **preco_min**: Produtos com pre√ßo maior ou igual ao valor informado
    - **preco_max**: Produtos com pre√ßo menor ou igual ao valor informado  
    - **limite**: M√°ximo de produtos retornados (padr√£o: 50)
    
    **Exemplos de uso:**
    - `/produtos` - Lista todos os produtos
    - `/produtos?categoria_id=1` - Produtos da categoria 1
    - `/produtos?preco_min=100&preco_max=500` - Produtos entre R$ 100 e R$ 500
    - `/produtos?limite=10` - Apenas 10 produtos
    
    **Retorna:** Lista de produtos com ID, nome, pre√ßo, estoque, vendedor e categoria
    """
    try:
        with MarketplaceDB() as db:
            produtos = db.get_produtos(categoria_id, preco_min, preco_max, limite)
            return produtos
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/produtos/{produto_id}")
async def get_produto(produto_id: int):
    """
    **Buscar produto espec√≠fico por ID**
    
    Retorna informa√ß√µes detalhadas de um produto espec√≠fico, incluindo:
    
    - Dados b√°sicos: nome, descri√ß√£o, pre√ßo, estoque
    - Informa√ß√µes do vendedor: nome da loja, nome e email do vendedor
    - ID √∫nico do produto para uso em pedidos
    
    **Par√¢metros:**
    - **produto_id**: ID √∫nico do produto (n√∫mero inteiro)
    
    **Exemplo:** `/produtos/1` - Busca o produto com ID 1
    
    **Retorna:** Objeto com dados completos do produto ou erro 404 se n√£o encontrado
    
    **Uso t√≠pico:** P√°gina de detalhes do produto, valida√ß√£o antes de adicionar ao carrinho
    """
    try:
        with MarketplaceDB() as db:
            produto = db.get_produto_by_id(produto_id)
            if not produto:
                raise HTTPException(status_code=404, detail="Produto n√£o encontrado")
            return produto
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/produtos/mais-vendidos")
async def produtos_mais_vendidos(limite: int = Query(10, description="N√∫mero de produtos")):
    """
    **Top produtos mais vendidos**
    
    Retorna uma lista dos produtos com maior quantidade vendida, baseado em pedidos entregues.
    
    **Par√¢metros:**
    - **limite**: Quantidade de produtos no ranking (padr√£o: 10, m√°ximo recomendado: 50)
    
    **Dados retornados para cada produto:**
    - Nome do produto e vendedor
    - Quantidade total vendida
    - Receita total gerada
    - N√∫mero de pedidos diferentes
    
    **Exemplo:** `/produtos/mais-vendidos?limite=5` - Top 5 produtos
    
    **Uso t√≠pico:** Homepage com "Mais Vendidos", relat√≥rios de performance, recomenda√ß√µes
    """
    try:
        with MarketplaceDB() as db:
            produtos = db.get_produtos_mais_vendidos(limite)
            return produtos
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== ENDPOINTS DE CATEGORIAS ====================

@app.get("/categorias")
async def listar_categorias():
    """
    **Listar todas as categorias dispon√≠veis**
    
    Retorna lista completa de categorias de produtos com informa√ß√µes adicionais:
    
    **Dados de cada categoria:**
    - ID da categoria (para filtros em outros endpoints)
    - Nome da categoria
    - Descri√ß√£o detalhada
    - Total de produtos nesta categoria
    
    **Uso t√≠pico:** 
    - Menu de navega√ß√£o do site
    - Filtros de busca
    - P√°gina de categorias
    - Dashboards administrativos
    
    **Exemplo de retorno:**
    ```json
    [
      {
        "id_categoria": 1,
        "nome": "Eletr√¥nicos", 
        "descricao": "Produtos eletr√¥nicos e tecnologia",
        "total_produtos": 25
      }
    ]
    ```
    """
    try:
        with MarketplaceDB() as db:
            categorias = db.get_categorias()
            return categorias
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== ENDPOINTS DE PEDIDOS ====================

@app.post("/pedidos")
async def criar_pedido(pedido: CriarPedido):
    """
    **Criar um novo pedido no marketplace**
    
    Este endpoint processa um pedido completo, incluindo pagamento e atualiza√ß√£o de estoque.
    
    **Dados necess√°rios (JSON):**
    ```json
    {
      "id_comprador": 6,
      "id_endereco": 1, 
      "metodo_pagamento": "cartao",
      "produtos": [
        {
          "id": 1,
          "quantidade": 2,
          "preco": 1299.99
        }
      ]
    }
    ```
    
    **Par√¢metros:**
    - **id_comprador**: ID do comprador (obtido via `/comprador/email/{email}`)
    - **id_endereco**: ID do endere√ßo de entrega
    - **metodo_pagamento**: "cartao", "pix" ou "boleto"
    - **produtos**: Array com ID, quantidade e pre√ßo de cada item
    
    **Processamento autom√°tico:**
    - ‚úÖ Cria√ß√£o do pagamento
    - ‚úÖ Cria√ß√£o do pedido
    - ‚úÖ Adi√ß√£o dos itens
    - ‚úÖ Atualiza√ß√£o do estoque
    - ‚úÖ Transa√ß√£o segura (rollback em caso de erro)
    
    **Retorna:** ID do pedido e pagamento criados ou erro detalhado
    """
    try:
        with MarketplaceDB() as db:
            # Converter ItemPedido para dict
            produtos_dict = [
                {
                    'id': item.id,
                    'quantidade': item.quantidade,
                    'preco': item.preco
                }
                for item in pedido.produtos
            ]
            
            resultado = db.criar_pedido(
                pedido.id_comprador,
                pedido.id_endereco,
                produtos_dict,
                pedido.metodo_pagamento
            )
            
            if not resultado['success']:
                raise HTTPException(status_code=400, detail=resultado['error'])
            
            return resultado
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/pedidos/comprador/{id_comprador}")
async def pedidos_comprador(id_comprador: int):
    """
    **Hist√≥rico de pedidos de um comprador**
    
    Retorna todos os pedidos realizados por um comprador espec√≠fico.
    
    **Par√¢metros:**
    - **id_comprador**: ID √∫nico do comprador
    
    **Dados retornados:**
    - ID do pedido e data de cria√ß√£o
    - Status atual (processando, enviado, entregue, etc.)
    - Valor total e m√©todo de pagamento
    - Status do pagamento (aprovado, pendente, etc.)
    - Lista de produtos no pedido
    
    **Ordena√ß√£o:** Pedidos mais recentes primeiro
    
    **Exemplo:** `/pedidos/comprador/6` - Pedidos do comprador ID 6
    
    **Uso t√≠pico:** 
    - P√°gina "Meus Pedidos" 
    - Hist√≥rico de compras
    - Acompanhamento de status
    - Suporte ao cliente
    """
    try:
        with MarketplaceDB() as db:
            pedidos = db.get_pedidos_comprador(id_comprador)
            return pedidos
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== ENDPOINTS DE AN√ÅLISES ====================

@app.get("/dashboard")
async def get_dashboard():
    """
    **Dashboard executivo com m√©tricas de vendas**
    
    Endpoint principal para obter indicadores consolidados do marketplace.
    
    **M√©tricas inclu√≠das:**
    
    **üìä Top 5 Vendedores:**
    - Nome da loja
    - Faturamento total (apenas pedidos entregues)
    - N√∫mero total de pedidos
    
    **üìÖ Vendas por M√™s:**
    - M√™s (1-12)
    - Total de pedidos no m√™s
    - Faturamento mensal
    
    **üí≥ M√©todos de Pagamento:**
    - Tipo de pagamento (cartao, pix, boleto)
    - N√∫mero de transa√ß√µes aprovadas
    - Valor total transacionado
    
    **Uso t√≠pico:**
    - Dashboard administrativo
    - Relat√≥rios gerenciais
    - KPIs de performance
    - Tomada de decis√µes estrat√©gicas
    
    **Atualiza√ß√£o:** Dados em tempo real baseados na √∫ltima transa√ß√£o
    """
    try:
        with MarketplaceDB() as db:
            dashboard = db.get_dashboard_vendas()
            return dashboard
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/clientes/vip")
async def clientes_vip(limite: int = Query(10, description="N√∫mero de clientes")):
    """
    **Top clientes que mais gastaram**
    
    Lista os clientes mais valiosos baseado no valor total gasto em pedidos entregues.
    
    **Par√¢metros:**
    - **limite**: Quantos clientes retornar no ranking (padr√£o: 10)
    
    **M√©tricas de cada cliente:**
    - Nome do comprador e CPF
    - Total de pedidos realizados
    - Valor total gasto (soma de todos os pedidos entregues)
    - Ticket m√©dio por pedido
    
    **Crit√©rio de ordena√ß√£o:** Valor total gasto (maior para menor)
    
    **Filtros aplicados:** 
    - Apenas pedidos com status "entregue"
    - Apenas pagamentos processados
    
    **Uso t√≠pico:**
    - Programas de fidelidade
    - Campanhas de marketing direcionadas
    - An√°lise de clientes
    - Relat√≥rios comerciais
    """
    try:
        with MarketplaceDB() as db:
            clientes = db.get_clientes_vip(limite)
            return clientes
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/estoque/critico")
async def estoque_critico(limite_estoque: int = Query(30, description="Limite de estoque")):
    """
    **Produtos com estoque baixo - Alerta de reposi√ß√£o**
    
    Identifica produtos que precisam de reposi√ß√£o urgente baseado no n√≠vel de estoque.
    
    **Par√¢metros:**
    - **limite_estoque**: Considera produtos com estoque at√© este valor (padr√£o: 30)
    
    **Classifica√ß√£o autom√°tica:**
    - üö® **CR√çTICO**: ‚â§ 10 unidades (reposi√ß√£o urgente)
    - ‚ö†Ô∏è **BAIXO**: ‚â§ 30 unidades (planejar reposi√ß√£o)
    
    **Dados de cada produto:**
    - Nome do produto e vendedor respons√°vel
    - Quantidade atual em estoque
    - Pre√ßo unit√°rio
    - Total vendido historicamente
    - Status do estoque (CR√çTICO/BAIXO)
    
    **Ordena√ß√£o:** Menor estoque primeiro (produtos mais cr√≠ticos no topo)
    
    **Uso t√≠pico:**
    - Gest√£o de estoque
    - Alertas autom√°ticos
    - Planejamento de compras
    - Relat√≥rios operacionais
    """
    try:
        with MarketplaceDB() as db:
            produtos = db.get_estoque_critico(limite_estoque)
            return produtos
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== ENDPOINTS DE USU√ÅRIOS ====================

@app.get("/comprador/email/{email}")
async def get_comprador_por_email(email: str):
    """
    **Buscar comprador por endere√ßo de email**
    
    Localiza um comprador usando seu email como identificador √∫nico.
    
    **Par√¢metros:**
    - **email**: Endere√ßo de email do comprador (ex: usuario@email.com)
    
    **Dados retornados:**
    - ID √∫nico do usu√°rio (necess√°rio para criar pedidos)
    - Nome completo
    - Email confirmado
    - Telefone (se cadastrado)
    - CPF do comprador
    
    **Exemplo:** `/comprador/email/lucas.almeida@email.com`
    
    **Uso t√≠pico:**
    - Login/autentica√ß√£o
    - Busca de perfil de usu√°rio
    - Valida√ß√£o antes de criar pedidos
    - Recupera√ß√£o de dados de cliente
    
    **Importante:** Este endpoint √© essencial para obter o `id_comprador` 
    necess√°rio na cria√ß√£o de pedidos via POST `/pedidos`
    """
    try:
        with MarketplaceDB() as db:
            comprador = db.get_comprador_by_email(email)
            if not comprador:
                raise HTTPException(status_code=404, detail="Comprador n√£o encontrado")
            return comprador
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/comprador/{id_comprador}/enderecos")
async def enderecos_comprador(id_comprador: int):
    """
    **Endere√ßos cadastrados de um comprador**
    
    Lista todos os endere√ßos de entrega cadastrados por um comprador espec√≠fico.
    
    **Par√¢metros:**
    - **id_comprador**: ID √∫nico do comprador
    
    **Dados de cada endere√ßo:**
    - ID do endere√ßo (necess√°rio para criar pedidos)
    - Rua, n√∫mero e complemento
    - CEP, cidade e estado
    - Vincula√ß√£o ao comprador
    
    **Ordena√ß√£o:** Por ID do endere√ßo (mais antigo primeiro)
    
    **Exemplo:** `/comprador/6/enderecos` - Endere√ßos do comprador ID 6
    
    **Uso t√≠pico:**
    - Sele√ß√£o de endere√ßo de entrega no checkout
    - Gerenciamento de endere√ßos no perfil
    - Valida√ß√£o de endere√ßos para pedidos
    - C√°lculo de frete por regi√£o
    
    **Importante:** O `id_endereco` retornado aqui √© necess√°rio 
    para o campo `id_endereco` ao criar pedidos via POST `/pedidos`
    """
    try:
        with MarketplaceDB() as db:
            enderecos = db.get_enderecos_comprador(id_comprador)
            return enderecos
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== ENDPOINT DE SA√öDE ====================

@app.get("/")
async def root():
    """
    **Endpoint de status da API**
    
    Endpoint principal que confirma se a API est√° online e operacional.
    
    **Retorna:**
    - Status da API (online/offline)
    - Vers√£o atual da aplica√ß√£o
    - Link para documenta√ß√£o interativa
    - Nome da aplica√ß√£o
    
    **Uso t√≠pico:**
    - Health check b√°sico
    - Verifica√ß√£o r√°pida de conectividade
    - Descoberta da documenta√ß√£o da API
    - Monitoramento de infraestrutura
    """
    return {
        "message": "Marketplace Database API",
        "status": "online",
        "version": "1.0.0",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    """
    **Health check completo da aplica√ß√£o**
    
    Verifica se a API e o banco de dados est√£o funcionando corretamente.
    
    **Testes realizados:**
    - ‚úÖ Conectividade com banco de dados PostgreSQL
    - ‚úÖ Execu√ß√£o de query simples de teste
    - ‚úÖ Status geral da aplica√ß√£o
    
    **C√≥digos de resposta:**
    - **200**: Tudo funcionando normalmente
    - **503**: Problema com banco de dados ou aplica√ß√£o
    
    **Uso t√≠pico:**
    - Monitoramento de infraestrutura
    - Load balancers e health checks
    - Alertas de sistema
    - Verifica√ß√£o antes de deploy
    
    **Importante:** Este endpoint deve sempre responder rapidamente.
    Se demorar mais de 5 segundos, pode indicar problema na infraestrutura.
    """
    try:
        with MarketplaceDB() as db:
            db.cursor.execute("SELECT 1")
            return {"status": "healthy", "database": "connected"}
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Database error: {str(e)}")

# ==================== EXECUTAR SERVIDOR ====================

def main():
    """Fun√ß√£o principal para execu√ß√£o"""
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    main()
